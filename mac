#!/bin/sh

# Welcome to the thoughtbot laptop script!
# Be prepared to turn your laptop (or desktop, no haters here)
# into an awesome development machine.

fancy_echo() {
  local fmt="$1"; shift

  # shellcheck disable=SC2059
  printf "\\n$fmt\\n" "$@"
}

append_to_zshrc() {
  local text="$1" zshrc
  local skip_new_line="${2:-0}"

  if [ -w "$HOME/.zshrc.local" ]; then
    zshrc="$HOME/.zshrc.local"
  else
    zshrc="$HOME/.zshrc"
  fi

  if ! grep -Fqs "$text" "$zshrc"; then
    if [ "$skip_new_line" -eq 1 ]; then
      printf "%s\\n" "$text" >> "$zshrc"
    else
      printf "\\n%s\\n" "$text" >> "$zshrc"
    fi
  fi
}

# shellcheck disable=SC2154
trap 'ret=$?; test $ret -ne 0 && printf "failed\n\n" >&2; exit $ret' EXIT

set -e

if [ ! -d "$HOME/.bin/" ]; then
  mkdir "$HOME/.bin"
fi

if [ ! -f "$HOME/.zshrc" ]; then
  touch "$HOME/.zshrc"
fi

# shellcheck disable=SC2016
append_to_zshrc 'export PATH="$HOME/.bin:$PATH"'

HOMEBREW_PREFIX="/usr/local"

if [ -d "$HOMEBREW_PREFIX" ]; then
  if ! [ -r "$HOMEBREW_PREFIX" ]; then
    sudo chown -R "$LOGNAME:admin" /usr/local
  fi
else
  sudo mkdir "$HOMEBREW_PREFIX"
  sudo chflags norestricted "$HOMEBREW_PREFIX"
  sudo chown -R "$LOGNAME:admin" "$HOMEBREW_PREFIX"
fi

update_shell() {
  local shell_path;
  shell_path="$(command -v zsh)"

  fancy_echo "Changing your shell to zsh ..."
  if ! grep "$shell_path" /etc/shells > /dev/null 2>&1 ; then
    fancy_echo "Adding '$shell_path' to /etc/shells"
    sudo sh -c "echo $shell_path >> /etc/shells"
  fi
  sudo chsh -s "$shell_path" "$USER"
}

case "$SHELL" in
  */zsh)
    if [ "$(command -v zsh)" != '/usr/local/bin/zsh' ] ; then
      update_shell
    fi
    ;;
  *)
    update_shell
    ;;
esac

gem_install_or_update() {
  if gem list "$1" --installed > /dev/null; then
    gem update "$@"
  else
    gem install "$@"
  fi
}

if ! command -v brew >/dev/null; then
  fancy_echo "Installing Homebrew ..."
    curl -fsS \
      'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby

    append_to_zshrc '# recommended by brew doctor'

    # shellcheck disable=SC2016
    append_to_zshrc 'export PATH="/usr/local/bin:$PATH"' 1

    export PATH="/usr/local/bin:$PATH"
fi

if brew list | grep -Fq brew-cask; then
  fancy_echo "Uninstalling old Homebrew-Cask ..."
  brew uninstall --force brew-cask
fi

fancy_echo "Updating Homebrew formulae ..."
brew update --force # https://github.com/Homebrew/brew/issues/1151
brew bundle --file=- <<EOF
tap "thoughtbot/formulae"
tap "homebrew/services"
tap "universal-ctags/universal-ctags"
tap "caskroom/cask"
tap "heroku/brew"

# Unix
brew "universal-ctags", args: ["HEAD"]
brew "git"
brew "openssl"
brew "rcm"
brew "reattach-to-user-namespace"
brew "the_silver_searcher"
brew "tmux"
brew "vim"
brew "watchman"
brew "zsh"
brew "tree"
brew "jq"
brew "aspell"
brew "sqlite"

# Heroku
brew "heroku/brew/heroku"
brew "parity"

# GitHub
brew "hub"

# Image manipulation
brew "imagemagick"

# Programming language prerequisites and package managers
brew "libyaml" # should come after openssl
brew "coreutils"
brew "yarn"
cask "gpg-suite"

# Install RVMt
gpg --keyserver hkp://pool.sks-keyservers.net --recv-keys 409B6B1796C275462A1703113804BB82D39DC0E3 7D2BAF1CF37B13E2069D6956105BD0E739499BDB
\curl -sSL https://get.rvm.io | bash -s stable --ruby

# Databases
brew "postgres", restart_service: :changed
brew "redis", restart_service: :changed
brew "memcached", restart_service: :changed

fancy_echo "Update heroku binary ..."
brew unlink heroku
brew link --force heroku


# Add spellcheck CLI to aspell
cat <<EOF > ~/.oh-my-zsh/custom/spellcheck.zsh
# Use aspell to check the spelling of a file.
# Usage
# 	$ spellcheck docs/test.md
spellcheck()
{
	aspell -c $@
}

alias spell='spellcheck'
alias spellchecker='spellcheck'
EOF

# Add custom zsh theme
cat <<EOF > ~/.oh-my-zsh/themes/scottserok.zsh-theme
local ret_status="%(?:%{$fg_bold[green]%}➜ :%{$fg_bold[red]%}➜ )"
PROMPT='${ret_status} %{$fg[cyan]%}%c%{$reset_color%} $(git_prompt_info)$ '

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg_bold[blue]%}git:%{$fg[red]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg[blue]%} %{$fg[white]%}✗"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$fg[blue]%} ✓"
EOF

# Set custom zsh theme
sed -i '' 's/ZSH_THEME="robbyrussell"/ZSH_THEME="scottserok"/' ~/.zshrc

# Install patheogen-vim
mkdir -p ~/.vim/autoload ~/.vim/bundle && \
curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim

# Customize vimrc
cat <<EOF > ~/.vimrc
let g:currentmode={
    \ 'n'      : 'NORMAL',
    \ 'no'     : 'N·Operator Pending ',
    \ 'v'      : 'V ',
    \ 'V'      : 'V·Line ',
    \ '\<C-V>' : 'V·Block ',
    \ 's'      : 'Select ',
    \ 'S'      : 'S·Line ',
    \ '\<C-S>' : 'S·Block ',
    \ 'i'      : 'INSERT',
    \ 'R'      : 'REPLACE',
    \ 'Rv'     : 'V·Replace ',
    \ 'c'      : 'COMMAND',
    \ 'cv'     : 'Vim Ex ',
    \ 'ce'     : 'Ex ',
    \ 'r'      : 'Prompt ',
    \ 'rm'     : 'More ',
    \ 'r?'     : 'Confirm ',
    \ '!'      : 'Shell ',
    \ 't'      : 'Terminal '
    \}

" Automatically change the statusline color depending on mode
function! ChangeStatusLineColor()
  if (mode() =~# '\v(n|no)')
    exe 'hi! StatusMode ctermfg=007 ctermbg=000'
  elseif (mode() =~# '\v(R|Rv)')
    exe 'hi! StatusMode ctermfg=White ctermbg=001'
  elseif (mode() =~# '\v(v|V)')
    exe 'hi! StatusMode ctermfg=007 ctermbg=000'
  elseif ( g:currentmode[mode()] ==# 'V·Block')
    exe 'hi! StatusMode ctermfg=007 ctermbg=000'
  elseif ( get(g:currentmode, mode(), '') ==# 't')
    exe 'hi! StatusMode ctermfg=007 ctermbg=000'
  elseif (mode() ==# 'i')
    exe 'hi! StatusMode ctermfg=Black ctermbg=148'
  else
    exe 'hi! StatusMode ctermfg=007 ctermbg=000'
  endif

  return ''
endfunction

set backspace=2
set backspace=2
set colorcolumn=+1
set expandtab
set laststatus=2
set mouse=a
set nobackup
set noswapfile
set nowritebackup
set number
set numberwidth=4
set ruler
set shell=/usr/local/bin/zsh\ -l
set shiftround
set shiftwidth=2
set tabstop=2
set textwidth=80
set statusline=
set statusline+=%{ChangeStatusLineColor()}
set statusline+=%#StatusMode#
set statusline+=\ %{g:currentmode[mode()]}\ |
set statusline+=%#StatusBranch#
set statusline+=\ %{gitbranch#name()}\ |
set statusline+=%#StatusFilePath#
set statusline+=\ %f
set statusline+=%m
set statusline+=%=
set statusline+=%#StatusFileMeta#
set statusline+=\ %y
set statusline+=\ %{&fileencoding?&fileencoding:&encoding}
set statusline+=\[%{&fileformat}\]
set statusline+=\ %p%%
set statusline+=\ %l:%c

hi StatusMode ctermbg=000
hi StatusBranch ctermbg=White ctermfg=Black
hi StatusFilePath ctermbg=000
hi StatusFileMeta ctermbg=000 ctermfg=White

syntax on

filetype plugin indent on

" remove whitespace on buffer write
autocmd BufWrite * :%s/\s\+$//e

execute pathogen#infect()
EOF
